install.packages(tidyverse)
install.packages('edgeR')
install.packages('Rtools')
1 + 1
install.packages('edgeR')
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("edgeR")
edgeR
install.packages('eximport')
install.packages('tximport')
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("tximport")
browseVignettes("tximport")
library(edgeR)
library(biomaRt)
library(dplyr)
library(tibble)
results_df <- read.csv('../Desktop/ludmer_center_work/douglas/pipelines/rna_seq/data/star_results.csv')
conditions_df <- read.csv('../Desktop/ludmer_center_work/douglas/pipelines/rna_seq/data/star_conditions.csv')
conditions_df
results_df <- read.csv('../Desktop/ludmer_center_work/douglas/pipelines/rna_seq/data/star_results.csv')
conditions_df <- read.csv('../Desktop/ludmer_center_work/douglas/pipelines/rna_seq/data/star_conditions.csv')
conditions_df
group <- c(rep("C1", 19), rep("C2", 26))
group
cds <- DGEList(results_df, group = conditions_df)
results_df
ncol(results_df)
nrow(conditions_df)
cds <- DGEList(results_df, group = conditions_df)
length(conditions_df)
conditions_df
conditions_df$sample_id <- NULL
conditions_df
cds <- DGEList(results_df, group = conditions_df)
cds <- DGEList(results_df, group = conditions_df$condition)
cds[rowSums(cpm(cds) > 1) >= 5,]
knitr::opts_chunk$set(fig.pos = 'p') # Places figures on their own pages
knitr::opts_chunk$set(out.width = '100%', dpi=300)
# I usually load my libraries up front to keep things organized
library(bookdown)
install.packages('bookdown')
install.packages('knitr')
knitr::opts_chunk$set(fig.pos = 'p') # Places figures on their own pages
knitr::opts_chunk$set(out.width = '100%', dpi=300)
# I usually load my libraries up front to keep things organized
library(bookdown)
library(knitr)
library(kableExtra)
install.packages('kableExtra')
install.packages('ggthemes')
install.packages('ggextra')
install.packages('ggExtra')
install.packages('stringr')
knitr::opts_chunk$set(fig.pos = 'p') # Places figures on their own pages
knitr::opts_chunk$set(out.width = '100%', dpi=300)
# I usually load my libraries up front to keep things organized
library(bookdown)
library(knitr)
library(kableExtra)
library(ggplot2)
library(ggthemes)
library(ggExtra)
library(dplyr)
library(stringr)
# New package Bioconductor
library(limma)
library(edgeR)
library(statmod)
library(tidyr)
library(RColorBrewer)
library(knitr)
library(biomaRt)
library(Mus.musculus)
# Experimental variables:
targets <- read.csv('C:/Users/amadou.barry/Documents/PostDoc/Pedro_Projects/conditions_df.csv')
getwd()
knitr::opts_chunk$set(fig.pos = 'p') # Places figures on their own pages
knitr::opts_chunk$set(out.width = '100%', dpi=300)
# I usually load my libraries up front to keep things organized
library(bookdown)
library(knitr)
library(kableExtra)
library(ggplot2)
library(ggthemes)
library(ggExtra)
library(dplyr)
library(stringr)
# New package Bioconductor
library(limma)
library(edgeR)
library(statmod)
library(tidyr)
library(RColorBrewer)
library(knitr)
library(biomaRt)
library(Mus.musculus)
# Experimental variables:
targets <- read.csv('../data/conditions_df.csv')
# STAR gene count output results dataframe:
star_results_df = read.csv('../data/star_results.csv', row.names=1)
# Generate DGEList Object of Gene Counts
dge_multi_level <- DGEList(counts=star_results_df)
# Prepare Design Matrix
targets_multi_level = data.frame(filename = targets$sample_id, subject = substr(targets$sample_id, 1, 5), treat = targets$treatment, sex = targets$sex, roi = targets$region)
combined_treat = factor(paste(targets_multi_level$treat, targets_multi_level$sex, targets_multi_level$roi, sep="."))
design_multi_level = model.matrix(~0+combined_treat)
colnames(design_multi_level) = levels(combined_treat)
# Filter Out Lowly Expressed Genes
# dim(dge_multi_level)
keep_multi_level <- filterByExpr(dge_multi_level, design_multi_level)
dge_multi_level_filtered <- dge_multi_level[keep_multi_level,,keep.lib.sizes=FALSE]
# dim(dge_multi_level_filtered)
# Add Annotaions
# geneid <- rownames(dge_multi_level_filtered)
# genes <- select(Mus.musculus, keys=geneid, columns=c("SYMBOL", "TXCHROM"), keytype="ENSEMBL")
# sum(is.na(genes$TXCHROM))
# dim(genes)
# Add Annotations from BiomaRt
mm9mart = useMart(biomart = "ENSEMBL_MART_ENSEMBL", dataset="mmusculus_gene_ensembl")
# The differential expression statistics are in the "top" data frame. Now we get the annotations for those genes from biomaRt
annotations <- getBM(attributes=c('ensembl_gene_id', 'description', 'external_gene_name', 'chromosome_name'), filters = 'ensembl_gene_id', values = rownames(dge_multi_level_filtered), mart = mm9mart)
# deg_data <- cbind(deg, annotations)
# Same order as in DGE object gene ids:
annotations <- annotations[match(rownames(dge_multi_level_filtered), annotations$ensembl_gene_id), ]
# Checking for duplicates
dim(annotations[!duplicated(annotations$ensembl_gene_id),])
# Add to DGEList object
dge_multi_level_filtered$annotations <- annotations
# Transformations from the raw-scale
cpm <- cpm(dge_multi_level)
lcpm <- cpm(dge_multi_level, log=TRUE)
L <- mean(dge_multi_level$samples$lib.size) * 1e-6
M <- median(dge_multi_level$samples$lib.size) * 1e-6
cpm_filtered <- cpm(dge_multi_level_filtered)
lcpm_filtered <- cpm(dge_multi_level_filtered, log=TRUE)
L_filtered <- mean(dge_multi_level_filtered$samples$lib.size) * 1e-6
M_filtered <- median(dge_multi_level_filtered$samples$lib.size) * 1e-6
dge_multi_level_filtered_normalized <- calcNormFactors(dge_multi_level_filtered, method = "TMM")
---
title: "RNA-seq analysis"
author: "Pedro and Amadou"
date: "1/23/2020"
output: pdf_document
---
warnings()
tinytex::install_tinytex()
tinytex:::is_tinytex()
install.packages('rmarkdown')
install.packages('rmarkdown')
install.packages("tinytex")
tinytex::install_tinytex()
library(tinytex)
tinytex:::is_tinytex()
library(Glimma)
install.packages('Glimma')
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("Glimma")
install.packages('rcorr')
install.packages('Hmisc')
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("GeneOverlap")
library(GeneOverlap)
data(GeneOverlap)
View(hESC.ChIPSeq.list)
View(hESC.RNASeq.list)
head(hESC.RNASeq.list)
type(hESC.RNASeq.list)
typeof(hESC.RNASeq.list)
library(biomaRt)
listFilters()
?useMart
con =url("http://bowtie-bio.sourceforge.net/recount/ExpressionSets/montpick_eset.RData")
load(file=con)
close(con)
mp = montpick.eset
pdata=pData(mp)
edata=as.data.frame(exprs(mp))
fdata = fData(mp)
con =url("http://bowtie-bio.sourceforge.net/recount/ExpressionSets/montpick_eset.RData")
load(file=con)
close(con)
mp = montpick.eset
pdata=pData(mp)
edata=as.data.frame(exprs(mp))
fdata = fData(mp)
dist1 = dist(t(edata))
dist1 = dist(t(edata))
hclust1 = hclust(dist1)
plot(hclust1,hang=-1)
View(hclust1)
myplclust(hclust1, labels = hclust1$labels, lab.col=rep(1, length(hclust1$labels)))
library(devtools)
install_github("ririzarr/rafalib")
citation("Mus.musculus")
library("Mus.musculus")
citation("Mus.musculus")
install.packages('Seurat')
install.packages('Seurat')
install.packages("installr")
library(installr)
updateR()
load("C:/Users/pedro/OneDrive - McGill University/projects/epigenetic_clocks/UC Irvine Moms DNAm-selected/Beta_value_finalqc_Mectransgen.rda")
View(Beta_value_all)
load("C:/Users/pedro/OneDrive - McGill University/projects/epigenetic_clocks/UC Irvine Moms DNAm-selected/Phenotype_RGSET_415_final.Rdata")
View(pheno)
View(Beta_value_all)
head(Beta_value_all@featureData)
head(Beta_value_all@featureData@data)
Beta_value_all@featureData
head(Beta_value_all)
head(Beta_value_all$Participant_ID_unique)
head(Beta_value_all$time_point)
View(Beta_value_all)
load("C:/Users/pedro/OneDrive - McGill University/projects/epigenetic_clocks/UC Irvine Moms DNAm-selected/Beta_value_finalqc_Mectransgen.rda")
readRDS("C:/Users/pedro/OneDrive - McGill University/projects/epigenetic_clocks/UC Irvine Moms DNAm-selected/Beta_value_finalqc_Mectransgen.rda")
Beta_value_all@phenoData
Beta_value_all@phenoData@data
Beta_value_all@phenoData@data
Beta_value_all@featureDataData@data
Beta_value_all@experimentDataData@data
View(Beta_value_all)
Beta_value_all@assayData
Beta_value_all@assayData$exprs
head(Beta_value_all@assayData$exprs)
unique(Beta_value_all@phenoData@data$time_point)
library(rmcorr)
# Sert working directory:
setwd("C:/Users/pedro/OneDrive - McGill University/projects/kieran/epigenetic_clocks/scripts")
# Import Data:
sample_df = read.table("../data/test_data/sample_df.csv", sep=",", header = 1)
rmcorr_df = read.table("../data/test_data/rmcorr_df.csv", sep=",", header = 1)
rmcorr_small_df = read.table("../data/test_data/rmcorr_small_df.csv", sep=",", header = 1)
rmcorr_small_all_zeros_df = read.table("../data/test_data/rmcorr_small_all_zeros_df.csv", sep=",", header = 1)
rmcorr(participant_id, epigen_age, chrono_age, rmcorr_small_df, CIs =
c("analytic", "bootstrap"), nreps = 100,
bstrap.out = F)
rmcorr(participant_id, epigen_age, chrono_age, rmcorr_small_all_zeros_df, CIs =
c("analytic", "bootstrap"), nreps = 100,
bstrap.out = F)
rmcorr(participant_id, epigen_age, chrono_age, rmcorr_df, CIs =
c("analytic", "bootstrap"), nreps = 100,
bstrap.out = F)
rmcorr(participant_id, epigen_age, chrono_age, rmcorr_df)
# Set working directory:
setwd("C:/Users/pedro/OneDrive - McGill University/projects/kieran/epigenetic_clocks")
# Load main dataset:
load("UC Irvine Moms DNAm-selected/Beta_value_finalqc_Mectransgen.rda")
Beta.TP@phenoData@data
Beta_value_all@phenoData@data
Beta_value_all@phenoData@data$age
Beta_value_all@phenoData@data[Beta_value_all@phenoData@data$Participant_ID_unique==1002]
Beta_value_all@phenoData@data[,Beta_value_all@phenoData@data$Participant_ID_unique==1002]
Beta_value_all@phenoData@data[ which(Beta_value_all@phenoData@data$Participant_ID_unique==1002), ]
Beta_value_all@phenoData@data[ which(Beta_value_all@phenoData@data$Participant_ID_unique==1002), ].age
Beta_value_all@phenoData@data[ which(Beta_value_all@phenoData@data$Participant_ID_unique==1002), ]$age
library(ggplot2)
library(ggrepel)
library(dplyr)
setwd("C:/Users/pedro/OneDrive - McGill University/general_scripts")
setwd("C:/Users/pedro/OneDrive - McGill University/pipelines/rna-seq_workflow/scripts/")
library(ggplot2)
library(ggrepel)
library(dplyr)
setwd("C:/Users/pedro/OneDrive - McGill University/pipelines/rna-seq_workflow/scripts/")
# degs = read.csv("../sdk1_study/DE_analysis/seurat/results/mm/PIO_L5L6_sdk1_de_seurat_results.csv")
degs = read.csv("../data_files/limma_voom/POLvsSAL.csv")
library(ggplot2)
library(ggrepel)
library(dplyr)
setwd("C:/Users/pedro/OneDrive - McGill University/pipelines/rna-seq_workflow/scripts/")
# Import Files:
# degs = differentially expressed genes (results from a software like limma-voom)
degs = read.csv("../data_files/limma_voom/POLvsSAL.csv")
# N.B. important to distinguish 3 items used in code here,
# (these will be named differently according to which pipeline data is from)
## the adjusted p-value.
## the logFC. (this can be variants such as log2FC, , etc.)
## the non-adjusted (normal) p-values.
# Prepare data:
degs$updown <- ifelse(degs$adj.P.Val > 0.05, 'Not Sig',
ifelse(degs$logFC < 0, 'down', 'up'))
# Plot Volcano plot
## No labels:
p <- ggplot(degs, aes(x = logFC, y = -log10(P.Value))) +
geom_point(aes(color = updown)) +
scale_color_manual(values = c("blue", "gray", "red")) +
theme_bw() +
theme(
# legend.position = "bottom",
legend.position = c(0.1, 0.825),
legend.background = element_rect(linetype="solid", colour ="black", size=0.5),
)
p
ggsave("../sample_figures/volcano_plot_degs.png", p, width = 6, height = 4)
ggsave("../sample_figures/volcano_plot_degs.svg", p, width = 11, height = 8.5)
## With genes labeled:
pl <- ggplot(degs, aes(x = logFC, y = -log10(P.Value))) +
geom_point(aes(color = updown)) +
scale_color_manual(values = c("blue", "gray", "red")) +
theme_bw() +
theme(
# legend.position = "bottom",
legend.position = c(0.1, 0.825),
legend.background = element_rect(linetype="solid", colour ="black", size=0.5),
) +
geom_text_repel(data = subset(degs, adj.P.Val < 0.005 & (logFC >= 1 | logFC <= 1)),
aes(label = gene_name),
size = 2.5,
box.padding = unit(0.35, "lines"),
point.padding = unit(0.3, "lines")
)
pl
## With genes labeled:
pl <- ggplot(degs, aes(x = logFC, y = -log10(P.Value))) +
geom_point(aes(color = updown)) +
scale_color_manual(values = c("blue", "gray", "red")) +
theme_bw() +
theme(
# legend.position = "bottom",
legend.position = c(0.1, 0.825),
legend.background = element_rect(linetype="solid", colour ="black", size=0.5),
) +
geom_text_repel(data = subset(degs, adj.P.Val < 0.005 & (logFC >= 1 | logFC <= 1)),
aes(label = external_gene_name),
size = 2.5,
box.padding = unit(0.35, "lines"),
point.padding = unit(0.3, "lines")
)
pl
ggsave("../results/volcano_plots/degs_labeled.png", pl, width = 6, height = 4)
ggsave("../results/volcano_plots/degs_labeled.svg", pl, width = 11, height = 8.5)
## With genes labeled:
pl <- ggplot(degs, aes(x = logFC, y = -log10(P.Value))) +
geom_point(aes(color = updown)) +
scale_color_manual(values = c("blue", "gray", "red")) +
theme_bw() +
theme(
# legend.position = "bottom",
legend.position = c(0.1, 0.825),
legend.background = element_rect(linetype="solid", colour ="black", size=0.5),
) +
geom_text_repel(data = subset(degs, adj.P.Val < 0.005 & (logFC >= 1 | logFC <= 1)),
aes(label = external_gene_name),
size = 2.5,
box.padding = unit(0.35, "lines"),
point.padding = unit(0.3, "lines")
)
pl
# Save to both PNG and SVG formats:
ggsave("../sample_figures/volcano_plot_degs_labeled.png", pl, width = 6, height = 4)
ggsave("../sample_figures/volcano_plot_degs_labeled.svg", pl, width = 11, height = 8.5)
